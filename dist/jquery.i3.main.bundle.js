/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/badge.js":
/*!*************************!*\
  !*** ./src/js/badge.js ***!
  \*************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Badge\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Badge constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function Badge(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3Badge.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    Badge.prototype = {\n        _init: function () {\n            this._render()\n        },\n\n        _render: function () {\n            const template = `\n        <span class=\"badge ${this.options.type ? `badge--${this.options.type}` : ''}\">\n          ${this.options.content}\n        </span>\n      `\n            this.element.html(template)\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3Badge = function (options) {\n        return this.each(function () {\n            new Badge($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3Badge.defaults = {\n        content: '', // {String} Content of the badge (required)\n        type: '', // {String} Type of the badge (optional), can be used to apply custom styles\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/badge.js?");

/***/ }),

/***/ "./src/js/breadrcrumbs.js":
/*!********************************!*\
  !*** ./src/js/breadrcrumbs.js ***!
  \********************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Breadcrumbs\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Breadcrumbs constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function Breadcrumbs(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3Breadcrumbs.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    Breadcrumbs.prototype = {\n        _init: function () {\n            this._render()\n        },\n\n        _render: function () {\n            const breadcrumbItems = this.options.items.map((item) => {\n                return `\n          <li class=\"breadcrumbs__item ${item.active ? 'breadcrumbs__item--active' : ''}\">\n            ${item.active ? `<span>${item.text}</span>` : `<a href=\"${item.href}\">${item.text}</a>`}\n          </li>\n        `\n            })\n\n            const template = `\n        <nav class=\"breadcrumbs\">\n          <ol class=\"breadcrumbs__list\">\n            ${breadcrumbItems.join('')}\n          </ol>\n        </nav>\n      `\n            this.element.html(template)\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3Breadcrumbs = function (options) {\n        return this.each(function () {\n            new Breadcrumbs($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3Breadcrumbs.defaults = {\n        items: [], // {Array} List of breadcrumb items, example: [{text: 'Home', href: '/'}, {text: 'Category', href: '/category', active: true}] (required)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/breadrcrumbs.js?");

/***/ }),

/***/ "./src/js/chips.js":
/*!*************************!*\
  !*** ./src/js/chips.js ***!
  \*************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Chips\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Chips constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function Chips(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3Chips.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    Chips.prototype = {\n        _init: function () {\n            this.options.chips.forEach((chip) => {\n                this._addChip(chip)\n            })\n        },\n\n        _addChip: function (chip) {\n            const chipType = chip.type || this.options.defaultType\n            const template = `\n        <div class=\"chips__item chips__item--${chipType} ${chip.deletable ? 'chips__item--deletable' : ''}\">\n          <span class=\"chips__content\">${chip.content}</span>\n          ${chip.deletable ? `<span class=\"chips__delete-btn\">Ã—</span>` : ''}\n        </div>\n      `\n            this.element.append(template)\n\n            if (chip.color) {\n                this.element.find('.chips__item:last-child').css('background-color', chip.color)\n            }\n\n            if (chip.deletable) {\n                this._bindDeleteEvent(this.element.find('.chips__delete-btn:last-child'))\n            }\n        },\n\n        _bindDeleteEvent: function (deleteBtn) {\n            const self = this\n            deleteBtn.on('click', function () {\n                $(this).closest('.chips__item').remove()\n                self.options.onDelete && self.options.onDelete()\n            })\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3Chips = function (options) {\n        return this.each(function () {\n            new Chips($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3Chips.defaults = {\n        chips: [], // {Array} List of chips, example: [{content: 'Chip 1'}, {content: 'Chip 2', type: 'contact'}] (required)\n        defaultType: 'outline', // {String} Default chip type (outline, contact, etc.) (optional)\n        onDelete: null, // {Function} Callback function when a chip is deleted (optional)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/chips.js?");

/***/ }),

/***/ "./src/js/contactlist.js":
/*!*******************************!*\
  !*** ./src/js/contactlist.js ***!
  \*******************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Contact List\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * ContactList constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function ContactList(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3ContactList.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    ContactList.prototype = {\n        _init: function () {\n            this._render()\n            this._bindEvents()\n        },\n\n        _render: function () {\n            const searchInput = `\n        <input type=\"text\" class=\"contact-list__search\" placeholder=\"Search...\">\n      `\n            const contactList = `\n        <ul class=\"contact-list__items\"></ul>\n      `\n            this.element.html(searchInput + contactList)\n\n            this.options.contacts.forEach((contact) => {\n                this._addContact(contact)\n            })\n        },\n\n        _addContact: function (contact) {\n            const contactItem = `\n        <li class=\"contact-list__item\">\n          <span class=\"contact-list__name\">${contact.name}</span>\n          <span class=\"contact-list__email\">${contact.email}</span>\n        </li>\n      `\n            this.element.find('.contact-list__items').append(contactItem)\n        },\n\n        _bindEvents: function () {\n            const self = this\n            this.element.find('.contact-list__search').on('input', function () {\n                const searchTerm = $(this).val().toLowerCase()\n                self._filterContacts(searchTerm)\n            })\n        },\n\n        _filterContacts: function (searchTerm) {\n            this.element.find('.contact-list__item').each(function () {\n                const name = $(this).find('.contact-list__name').text().toLowerCase()\n                const email = $(this).find('.contact-list__email').text().toLowerCase()\n\n                if (name.includes(searchTerm) || email.includes(searchTerm)) {\n                    $(this).show()\n                } else {\n                    $(this).hide()\n                }\n            })\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3ContactList = function (options) {\n        return this.each(function () {\n            new ContactList($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3ContactList.defaults = {\n        contacts: [], // {Array} List of contacts, example: [{name: 'John Doe', email: 'john@example.com'}, {name: 'Jane Doe', email: 'jane@example.com'}] (required)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/contactlist.js?");

/***/ }),

/***/ "./src/js/contentblock.js":
/*!********************************!*\
  !*** ./src/js/contentblock.js ***!
  \********************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Content Block\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * ContentBlock constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function ContentBlock(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3ContentBlock.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    ContentBlock.prototype = {\n        _init: function () {\n            this._render()\n        },\n\n        _render: function () {\n            const template = `\n        <div class=\"content-block ${this.options.type}\">\n          ${this.options.header ? `<div class=\"content-block__header\">${this.options.header}</div>` : ''}\n          <div class=\"content-block__content\">${this.options.content}</div>\n          ${this.options.footer ? `<div class=\"content-block__footer\">${this.options.footer}</div>` : ''}\n        </div>\n      `\n            this.element.html(template)\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3ContentBlock = function (options) {\n        return this.each(function () {\n            new ContentBlock($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3ContentBlock.defaults = {\n        type: 'normal', // {String} Type of content block (normal, outline, inset, inset-outline, header, footer, header-footer) (optional)\n        header: '', // {String} Header content (optional)\n        content: '', // {String} Main content (required)\n        footer: '', // {String} Footer content (optional)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/contentblock.js?");

/***/ }),

/***/ "./src/js/datatables.js":
/*!******************************!*\
  !*** ./src/js/datatables.js ***!
  \******************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Data Tables\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * DataTables constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function DataTables(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3DataTables.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    DataTables.prototype = {\n        _init: function () {\n            this._render()\n            this._bindEvents()\n        },\n\n        _render: function () {\n            const headerRow = `\n        <tr>\n          ${this.options.columns\n                .map((column) => `<th>${column.title}</th>`)\n                .join('')}\n        </tr>\n      `\n            const bodyRows = this.options.data.map((row) => {\n                return `\n          <tr>\n            ${this.options.columns\n                    .map((column) => `<td>${row[column.data]}</td>`)\n                    .join('')}\n          </tr>\n        `\n            })\n\n            this.element.find('thead').html(headerRow)\n            this.element.find('tbody').html(bodyRows.join(''))\n        },\n\n        _bindEvents: function () {\n            // Add any event listeners here if needed\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3DataTables = function (options) {\n        return this.each(function () {\n            new DataTables($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3DataTables.defaults = {\n        columns: [], // {Array} Column configuration, example: [{title: 'Column 1', data: 'column1'}, {title: 'Column 2', data: 'column2'}] (required)\n        data: [], // {Array} Data for the table, example: [{column1: 'Value 1', column2: 'Value 2'}, {column1: 'Value 3', column2: 'Value 4'}] (required)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/datatables.js?");

/***/ }),

/***/ "./src/js/dialog.js":
/*!**************************!*\
  !*** ./src/js/dialog.js ***!
  \**************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Dialog\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Dialog constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function Dialog(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3Dialog.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    Dialog.prototype = {\n        _init: function () {\n            this._render()\n            this._bindEvents()\n        },\n\n        _render: function () {\n            const template = `\n        <div class=\"dialog-overlay\">\n          <div class=\"dialog\">\n            <button class=\"dialog__close\" aria-label=\"Close\">Ã—</button>\n            <div class=\"dialog__content\">${this.options.content}</div>\n            <div class=\"dialog__buttons\">\n              ${this.options.buttons\n                .map(\n                    (button) => `\n                  <button class=\"dialog__button dialog__button--${button.type}\">${button.text}</button>\n                `\n                )\n                .join('')}\n            </div>\n          </div>\n        </div>\n      `\n            this.element.append(template)\n        },\n\n        _bindEvents: function () {\n            const self = this\n            this.element.find('.dialog__close').on('click', function () {\n                self.close()\n            })\n            this.element.find('.dialog__button').each(function (index) {\n                $(this).on('click', function () {\n                    self.options.onClick(index)\n                    self.close()\n                })\n            })\n        },\n\n        open: function () {\n            this.element.find('.dialog-overlay').addClass('dialog-overlay--visible')\n        },\n\n        close: function () {\n            this.element.find('.dialog-overlay').removeClass('dialog-overlay--visible')\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3Dialog = function (options) {\n        return this.each(function () {\n            new Dialog($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3Dialog.defaults = {\n        content: '', // {String} Content of the dialog (required)\n        buttons: [\n            // {Object} Buttons configuration (optional)\n            // Example: [{text: 'OK', type: 'primary'}, {text: 'Cancel', type: 'secondary'}]\n        ],\n        onClick: function () {}, // {Function} Callback function when a button is clicked (optional)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/dialog.js?");

/***/ }),

/***/ "./src/js/fab.js":
/*!***********************!*\
  !*** ./src/js/fab.js ***!
  \***********************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Floating Action Button\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * FAB constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function FAB(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3Fab.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    FAB.prototype = {\n        _init: function () {\n            this._render()\n            this._bindEvents()\n            this._setPosition()\n        },\n\n        _render: function () {\n            const template = `\n        <button class=\"fab\" aria-label=\"${this.options.ariaLabel}\">\n          <i class=\"${this.options.icon}\"></i>\n        </button>\n      `\n            this.element.html(template)\n        },\n\n        _bindEvents: function () {\n            const self = this\n            this.element.find('.fab').on('click', function () {\n                self.options.onClick()\n            })\n        },\n\n        _setPosition: function () {\n            const position = this.options.position\n            this.element.find('.fab').css({\n                right: position.includes('right') ? '24px' : '',\n                left: position.includes('left') ? '24px' : '',\n                bottom: position.includes('bottom') ? '24px' : '',\n                top: position.includes('top') ? '24px' : '',\n                position: 'fixed',\n                ...(position === 'center' && {\n                    left: '50%',\n                    top: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }),\n                ...(position === 'bottom-center' && {\n                    left: '50%',\n                    bottom: '24px',\n                    transform: 'translateX(-50%)',\n                }),\n            })\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3Fab = function (options) {\n        return this.each(function () {\n            new FAB($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3Fab.defaults = {\n        ariaLabel: 'Floating Action Button', // {String} Accessible name for the FAB (optional)\n        icon: 'fas fa-plus', // {String} Icon class for the FAB (optional)\n        onClick: function () {}, // {Function} Callback function when the FAB is clicked (optional)\n        position: 'bottom-right', // {String} Position of the FAB (top-left, top-right, bottom-left, bottom-right, center, bottom-center) (optional)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/fab.js?");

/***/ }),

/***/ "./src/js/forminputs.js":
/*!******************************!*\
  !*** ./src/js/forminputs.js ***!
  \******************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Form Inputs\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * FormInputs constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function FormInputs(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3FormInputs.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    FormInputs.prototype = {\n        _init: function () {\n            this._render()\n            this._bindEvents()\n        },\n\n        _render: function () {\n            const template = `\n        <div class=\"form-group ${this.options.type}\">\n          ${this.options.label ? `<label for=\"${this.options.id}\">${this.options.label}</label>` : ''}\n          <input\n            type=\"${this.options.inputType}\"\n            id=\"${this.options.id}\"\n            name=\"${this.options.name}\"\n            class=\"form-control\"\n            placeholder=\"${this.options.placeholder}\"\n            value=\"${this.options.value}\"\n            required=\"${this.options.required}\"\n          >\n          ${this.options.additionalInfo ? `<small class=\"form-text text-muted\">${this.options.additionalInfo}</small>` : ''}\n          ${this.options.clearButton ? `<span class=\"input-clear-btn\">Ã—</span>` : ''}\n          ${this.options.validation ? `<div class=\"invalid-feedback\">${this.options.validationMessage}</div>` : ''}\n        </div>\n      `\n            this.element.html(template)\n        },\n\n        _bindEvents: function () {\n            const self = this\n            if (this.options.clearButton) {\n                this.element.find('.input-clear-btn').on('click', function () {\n                    self.element.find('input').val('').trigger('change')\n                })\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3FormInputs = function (options) {\n        return this.each(function () {\n            new FormInputs($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3FormInputs.defaults = {\n        type: 'outline', // {String} Type of input field (outline, floating, outline-floating, etc.) (optional)\n        label: '', // {String} Label for input field (optional)\n        inputType: 'text', // {String} Type of input (text, email, password, etc.) (optional)\n        id: '', // {String} ID for input field (optional)\n        name: '', // {String} Name for input field (optional)\n        placeholder: '', // {String} Placeholder for input field (optional)\n        value: '', // {String} Initial value for input field (optional)\n        required: false, // {Boolean} Is input field required (optional)\n        clearButton: false, // {Boolean} Show clear button (optional)\n        validation: false, // {Boolean} Enable validation (optional)\n        validationMessage: 'Please enter a valid value', // {String} Validation error message (optional)\n        additionalInfo: '', // {String} Additional info to display below input field (optional)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/forminputs.js?");

/***/ }),

/***/ "./src/js/list.js":
/*!************************!*\
  !*** ./src/js/list.js ***!
  \************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI List\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * List constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function List(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3List.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    List.prototype = {\n        _init: function () {\n            this._render()\n            this._bindEvents()\n        },\n\n        _render: function () {\n            const template = `\n        <ul class=\"js-list\">\n          ${this.options.items\n                .map(\n                    (item) => `\n            <li class=\"js-list__item\">\n              <a href=\"${item.url}\" class=\"js-list__link\">${item.text}</a>\n            </li>\n          `\n                )\n                .join('')}\n        </ul>\n      `\n            this.element.html(template)\n        },\n\n        _bindEvents: function () {\n            // Add any event listeners here if needed\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3List = function (options) {\n        return this.each(function () {\n            new List($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3List.defaults = {\n        items: [], // {Array} List of items, example: [{text: 'Item 1', url: '#'}, {text: 'Item 2', url: '#'}] (required)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/list.js?");

/***/ }),

/***/ "./src/js/listbutton.js":
/*!******************************!*\
  !*** ./src/js/listbutton.js ***!
  \******************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI List Button\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * ListButton constructor\n     * @param {Object} element - jQuery object to create a new instance\n     * @param {Object} options - user defined settings\n     */\n    function ListButton(element, options) {\n        this.element = element\n        this.options = $.extend({}, $.fn.i3ListButton.defaults, options)\n        this._init()\n    }\n\n    /**\n     * Plugin prototype methods\n     */\n    ListButton.prototype = {\n        _init: function () {\n            this._render()\n            this._bindEvents()\n        },\n\n        _render: function () {\n            const template = `\n        <div class=\"list-button\">\n          <button class=\"list-button__toggle\">${this.options.toggleText}</button>\n          <ul class=\"list-button__list\">\n            ${this.options.items\n                .map(\n                    (item) => `\n              <li class=\"list-button__item\">\n                <a href=\"${item.href}\" class=\"list-button__link\">${item.text}</a>\n              </li>\n            `\n                )\n                .join('')}\n          </ul>\n        </div>\n      `\n            this.element.html(template)\n        },\n\n        _bindEvents: function () {\n            const self = this\n            this.element.find('.list-button__toggle').on('click', function () {\n                self.element.find('.list-button__list').slideToggle()\n            })\n        },\n    }\n\n    /**\n     * jQuery plugin definition\n     */\n    $.fn.i3ListButton = function (options) {\n        return this.each(function () {\n            new ListButton($(this), options)\n        })\n    }\n\n    /**\n     * Default plugin settings\n     * @type {Object}\n     */\n    $.fn.i3ListButton.defaults = {\n        toggleText: 'Show list', // {String} Text for toggle button (optional)\n        items: [], // {Array} List of items, example: [{text: 'Item 1', href: '#'}, {text: 'Item 2', href: '#'}] (required)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/listbutton.js?");

/***/ }),

/***/ "./src/js/menulist.js":
/*!****************************!*\
  !*** ./src/js/menulist.js ***!
  \****************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Menu\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * MenuList constructor.\n     * @param {Object} options - User options.\n     */\n    function MenuList(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    MenuList.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the menu list container (required).\n            element: null,\n            // Items for the menu list.\n            items: [],\n            // Callback function when a menu item is clicked.\n            onClick: null,\n        },\n\n        /**\n         * Initialize the menu list.\n         */\n        init: function () {\n            this.render()\n            this.bindEvents()\n        },\n\n        /**\n         * Render the menu list items.\n         */\n        render: function () {\n            this.options.items.forEach((item) => {\n                const $item = $(`<li class=\"menu-list__item\"></li>`)\n\n                if (item.icon) {\n                    $item.append(`<i class=\"menu-list__icon ${item.icon}\"></i>`)\n                }\n\n                if (item.label) {\n                    $item.append(`<span class=\"menu-list__label\">${item.label}</span>`)\n                }\n\n                if (item.subtitle) {\n                    $item.append(`<span class=\"menu-list__subtitle\">${item.subtitle}</span>`)\n                }\n\n                if (item.link) {\n                    $item.attr('data-link', item.link)\n                }\n\n                this.$element.append($item)\n            })\n        },\n\n        /**\n         * Bind events to the menu list.\n         */\n        bindEvents: function () {\n            this.$element.on('click', '.menu-list__item', this.onItemClick.bind(this))\n        },\n\n        /**\n         * Handle menu list item click event.\n         * @param {Event} event - Click event.\n         */\n        onItemClick: function (event) {\n            const $item = $(event.currentTarget)\n            const index = this.$element.find('.menu-list__item').index($item)\n            const link = $item.data('link')\n\n            if (link) {\n                window.location.href = link\n                return\n            }\n\n            if (typeof this.options.onClick === 'function') {\n                this.options.onClick(index, event)\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3MenuList = function (options) {\n        return new MenuList(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/menulist.js?");

/***/ }),

/***/ "./src/js/messages.js":
/*!****************************!*\
  !*** ./src/js/messages.js ***!
  \****************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Messages\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Messages constructor.\n     * @param {Object} options - User options.\n     */\n    function Messages(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Messages.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the messages container (required).\n            element: null,\n            // Callback function when a new message is sent.\n            onSend: null,\n        },\n\n        /**\n         * Initialize the messages.\n         */\n        init: function () {\n            this.createChat()\n            this.createForm()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the chat DOM elements.\n         */\n        createChat: function () {\n            this.$chat = $('<div class=\"messages__chat\"></div>')\n            this.$element.append(this.$chat)\n        },\n\n        /**\n         * Create the send form DOM elements.\n         */\n        createForm: function () {\n            this.$form = $(\n                `<form class=\"messages__form\">\n          <input type=\"text\" class=\"messages__input\" placeholder=\"Type your message...\">\n          <button type=\"submit\" class=\"messages__send\">Send</button>\n        </form>`\n            )\n\n            this.$element.append(this.$form)\n        },\n\n        /**\n         * Bind events to the messages.\n         */\n        bindEvents: function () {\n            this.$form.on('submit', this.onFormSubmit.bind(this))\n        },\n\n        /**\n         * Handle form submit event.\n         * @param {Event} event - Submit event.\n         */\n        onFormSubmit: function (event) {\n            event.preventDefault()\n\n            const message = this.$form.find('.messages__input').val()\n\n            if (message.trim()) {\n                this.addMessage(message, 'self')\n\n                if (typeof this.options.onSend === 'function') {\n                    this.options.onSend(message)\n                }\n\n                this.$form.find('.messages__input').val('')\n            }\n        },\n\n        /**\n         * Add a new message to the chat.\n         * @param {string} message - The message text.\n         * @param {string} sender - The sender type ('self' or 'other').\n         */\n        addMessage: function (message, sender) {\n            const $message = $(`<div class=\"messages__message messages__message--${sender}\">${message}</div>`)\n            this.$chat.append($message)\n\n            this.$element.scrollTop(this.$element[0].scrollHeight)\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Messages = function (options) {\n        return new Messages(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/messages.js?");

/***/ }),

/***/ "./src/js/navbar.js":
/*!**************************!*\
  !*** ./src/js/navbar.js ***!
  \**************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Navbar\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Navbar constructor.\n     * @param {Object} options - User options.\n     */\n    function Navbar(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Navbar.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the navbar container (required).\n            element: null,\n            // Navbar size: 'small', 'medium', or 'large'.\n            size: 'medium',\n            // Flag to enable or disable sticky behavior.\n            sticky: true,\n        },\n\n        /**\n         * Initialize the navbar.\n         */\n        init: function () {\n            this.setSize()\n\n            if (this.options.sticky) {\n                this.bindStickyEvents()\n            }\n        },\n\n        /**\n         * Set the navbar size.\n         */\n        setSize: function () {\n            this.$element.addClass(`navbar--${this.options.size}`)\n        },\n\n        /**\n         * Bind events for sticky behavior.\n         */\n        bindStickyEvents: function () {\n            const self = this\n\n            $(window).on('scroll', function () {\n                if ($(this).scrollTop() > 0) {\n                    self.$element.addClass('is-sticky')\n                } else {\n                    self.$element.removeClass('is-sticky')\n                }\n            })\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Navbar = function (options) {\n        return new Navbar(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/navbar.js?");

/***/ }),

/***/ "./src/js/notification.js":
/*!********************************!*\
  !*** ./src/js/notification.js ***!
  \********************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Notification\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Notification constructor.\n     * @param {Object} options - User options.\n     */\n    function Notification(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Notification.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the notification container (required).\n            element: null,\n            // Notification message.\n            message: '',\n            // Flag to show or hide the close button.\n            showCloseButton: true,\n            // Callback function when the notification is clicked.\n            onClick: null,\n            // Callback function when the close button is clicked.\n            onClose: null,\n        },\n\n        /**\n         * Initialize the notification.\n         */\n        init: function () {\n            this.createNotification()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the notification DOM elements.\n         */\n        createNotification: function () {\n            this.$notification = $(`<div class=\"notification is-hidden\">${this.options.message}</div>`)\n\n            if (this.options.showCloseButton) {\n                this.$closeButton = $(`<span class=\"notification__close\">&times;</span>`)\n                this.$notification.append(this.$closeButton)\n            }\n\n            $('body').append(this.$notification)\n        },\n\n        /**\n         * Bind events to the notification.\n         */\n        bindEvents: function () {\n            this.$notification.on('click', this.onNotificationClick.bind(this))\n            this.$closeButton.on('click', this.onCloseButtonClick.bind(this))\n        },\n\n        /**\n         * Handle notification click event.\n         * @param {Event} event - Click event.\n         */\n        onNotificationClick: function (event) {\n            if (typeof this.options.onClick === 'function') {\n                this.options.onClick(event)\n            }\n\n            this.hide()\n        },\n\n        /**\n         * Handle close button click event.\n         * @param {Event} event - Click event.\n         */\n        onCloseButtonClick: function (event) {\n            event.stopPropagation()\n\n            if (typeof this.options.onClose === 'function') {\n                this.options.onClose(event)\n            }\n\n            this.hide()\n        },\n\n        /**\n         * Show the notification.\n         */\n        show: function () {\n            this.$notification.removeClass('is-hidden')\n        },\n\n        /**\n         * Hide the notification.\n         */\n        hide: function () {\n            this.$notification.addClass('is-hidden')\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Notification = function (options) {\n        return new Notification(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/notification.js?");

/***/ }),

/***/ "./src/js/popover.js":
/*!***************************!*\
  !*** ./src/js/popover.js ***!
  \***************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Popover\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Popover constructor.\n     * @param {Object} options - User options.\n     */\n    function Popover(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Popover.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the popover trigger (required).\n            element: null,\n            // Popover content: text or list of items.\n            content: '',\n            // Popover placement: 'top', 'bottom', 'left', or 'right'.\n            placement: 'bottom',\n            // Offset from the trigger element (in pixels).\n            offset: 10,\n            // Callback function when a list item is clicked.\n            onClick: null,\n        },\n\n        /**\n         * Initialize the popover.\n         */\n        init: function () {\n            this.createPopover()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the popover DOM elements.\n         */\n        createPopover: function () {\n            this.$popover = $(`<div class=\"popover\"></div>`)\n\n            if (Array.isArray(this.options.content)) {\n                const $list = $('<ul class=\"popover__list\"></ul>')\n\n                this.options.content.forEach((item) => {\n                    const $item = $(`<li class=\"popover__item\">${item}</li>`)\n                    $list.append($item)\n                })\n\n                this.$popover.append($list)\n            } else {\n                this.$popover.text(this.options.content)\n            }\n\n            this.$arrow = $(`<div class=\"popover__arrow popover__arrow--${this.options.placement}\"></div>`)\n            this.$popover.append(this.$arrow)\n\n            $('body').append(this.$popover)\n        },\n\n        /**\n         * Bind events to the popover.\n         */\n        bindEvents: function () {\n            this.$element.on('click', this.toggle.bind(this))\n            this.$popover.on('click', '.popover__item', this.onItemClick.bind(this))\n            $(document).on('click', this.hide.bind(this))\n        },\n\n        /**\n         * Toggle the popover visibility.\n         * @param {Event} event - Click event.\n         */\n        toggle: function (event) {\n            event.stopPropagation()\n\n            if (this.$popover.is(':visible')) {\n                this.hide()\n            } else {\n                this.show()\n            }\n        },\n\n        /**\n         * Show the popover.\n         */\n        show: function () {\n            const offset = this.options.offset\n            const triggerRect = this.$element[0].getBoundingClientRect()\n            const scrollTop = window.pageYOffset || document.documentElement.scrollTop\n            const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft\n\n            let left, top\n\n            switch (this.options.placement) {\n                case 'top':\n                    top = triggerRect.top + scrollTop - this.$popover.outerHeight() - offset\n                    left = triggerRect.left + scrollLeft + (triggerRect.width - this.$popover.outerWidth()) / 2\n                    break\n                case 'bottom':\n                    top = triggerRect.bottom + scrollTop + offset\n                    left = triggerRect.left + scrollLeft + (triggerRect.width - this.$popover.outerWidth()) / 2\n                    break\n                case 'left':\n                    top = triggerRect.top + scrollTop + (triggerRect.height - this.$popover.outerHeight()) / 2\n                    left = triggerRect.left + scrollLeft - this.$popover.outerWidth() - offset\n                    break\n                case 'right':\n                    top = triggerRect.top + scrollTop + (triggerRect.height - this.$popover.outerHeight()) / 2\n                    left = triggerRect.right + scrollLeft + offset\n                    break\n            }\n\n            this.$popover.css({ top, left }).show()\n        },\n\n        /**\n         * Hide the popover.\n         */\n        hide: function () {\n            this.$popover.hide()\n        },\n\n        /**\n         * Handle popover list item click event.\n         * @param {Event} event - Click event.\n         */\n        onItemClick: function (event) {\n            const $item = $(event.currentTarget)\n            const index = this.$popover.find('.popover__item').index($item)\n\n            if (typeof this.options.onClick === 'function') {\n                this.options.onClick(index)\n            }\n\n            this.hide()\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Popover = function (options) {\n        return new Popover(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/popover.js?");

/***/ }),

/***/ "./src/js/popup.js":
/*!*************************!*\
  !*** ./src/js/popup.js ***!
  \*************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Popup\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Popup constructor.\n     * @param {Object} options - User options.\n     */\n    function Popup(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$body = $('body')\n        this.init()\n    }\n\n    Popup.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Content HTML (required).\n            content: null,\n            // Callback function when the popup is closed.\n            onClose: null,\n        },\n\n        /**\n         * Initialize the popup.\n         */\n        init: function () {\n            this.createPopup()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the popup DOM elements.\n         */\n        createPopup: function () {\n            this.$popup = $(`\n        <div class=\"popup\">\n          <div class=\"popup__content\">\n            ${this.options.content}\n            <div class=\"popup__close\">&times;</div>\n          </div>\n        </div>\n      `)\n\n            this.$body.append(this.$popup)\n        },\n\n        /**\n         * Bind events to the popup.\n         */\n        bindEvents: function () {\n            this.$popup.on('click', '.popup__close', this.close.bind(this))\n        },\n\n        /**\n         * Open the popup.\n         */\n        open: function () {\n            this.$popup.addClass('is-visible')\n        },\n\n        /**\n         * Close the popup.\n         */\n        close: function () {\n            this.$popup.removeClass('is-visible')\n\n            if (typeof this.options.onClose === 'function') {\n                this.options.onClose()\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Popup = function (options) {\n        return new Popup(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/popup.js?");

/***/ }),

/***/ "./src/js/preloader.js":
/*!*****************************!*\
  !*** ./src/js/preloader.js ***!
  \*****************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Preloader\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Preloader constructor.\n     * @param {Object} options - User options.\n     */\n    function Preloader(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$body = $('body')\n        this.init()\n    }\n\n    Preloader.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Timeout before hiding the preloader (in milliseconds).\n            timeout: 300,\n            // Callback function when the preloader is hidden.\n            onHide: null,\n        },\n\n        /**\n         * Initialize the preloader.\n         */\n        init: function () {\n            this.createPreloader()\n            this.hidePreloader()\n        },\n\n        /**\n         * Create the preloader DOM elements.\n         */\n        createPreloader: function () {\n            this.$preloader = $(`\n        <div class=\"preloader\">\n          <div class=\"preloader__spinner\"></div>\n        </div>\n      `)\n\n            this.$body.append(this.$preloader)\n        },\n\n        /**\n         * Hide the preloader with a timeout.\n         */\n        hidePreloader: function () {\n            const self = this\n\n            setTimeout(function () {\n                self.$preloader.remove()\n\n                if (typeof self.options.onHide === 'function') {\n                    self.options.onHide()\n                }\n            }, this.options.timeout)\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Preloader = function (options) {\n        return new Preloader(options)\n    }\n})(jQuery)\n\n//# sourceURL=webpack:///./src/js/preloader.js?");

/***/ }),

/***/ "./src/js/progressbar.js":
/*!*******************************!*\
  !*** ./src/js/progressbar.js ***!
  \*******************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Progressbar\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Progressbar constructor.\n     * @param {Object} options - User options.\n     */\n    function Progressbar(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Progressbar.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the progressbar container (required).\n            element: null,\n            // Initial value of the progressbar (from 0 to 100).\n            value: 0,\n            // Callback function when the progressbar value changes.\n            onUpdate: null,\n        },\n\n        /**\n         * Initialize the progressbar.\n         */\n        init: function () {\n            this.$value = $('<div class=\"progressbar__value\"></div>')\n            this.$element.addClass('progressbar').append(this.$value)\n            this.setValue(this.options.value)\n        },\n\n        /**\n         * Set the progressbar value.\n         * @param {number} value - Value from 0 to 100.\n         */\n        setValue: function (value) {\n            value = Math.min(Math.max(value, 0), 100)\n            this.$value.css('width', `${value}%`)\n\n            if (typeof this.options.onUpdate === 'function') {\n                this.options.onUpdate(value)\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Progressbar = function (options) {\n        return new Progressbar(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/progressbar.js?");

/***/ }),

/***/ "./src/js/radio.js":
/*!*************************!*\
  !*** ./src/js/radio.js ***!
  \*************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Radio\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Radio constructor.\n     * @param {Object} options - User options.\n     */\n    function Radio(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Radio.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the radio container (required).\n            element: null,\n            // Layout type: 'list' or 'inline'.\n            layout: 'list',\n            // Name attribute for the radio inputs.\n            name: '',\n            // Selected value.\n            value: '',\n            // Callback function when the radio value changes.\n            onChange: null,\n        },\n\n        /**\n         * Initialize the radio.\n         */\n        init: function () {\n            this.$radioList = $('<ul class=\"radio-list\"></ul>')\n            this.$element.append(this.$radioList)\n\n            this.render()\n            this.bindEvents()\n        },\n\n        /**\n         * Render the radio items.\n         */\n        render: function () {\n            this.$radioList.empty()\n\n            const layout = this.options.layout === 'inline' ? 'radio-inline' : ''\n\n            this.options.items.forEach((item) => {\n                const $item = $(`\n          <li class=\"radio-item ${item.value === this.options.value ? 'is-checked' : ''}\">\n            <input type=\"radio\" class=\"radio\" name=\"${this.options.name}\" value=\"${item.value}\">\n            <span>${item.label}</span>\n          </li>\n        `)\n\n                if (layout) {\n                    $item.addClass(layout)\n                }\n\n                this.$radioList.append($item)\n            })\n        },\n\n        /**\n         * Bind events to the radio.\n         */\n        bindEvents: function () {\n            this.$radioList.on('click', '.radio-item', this.onItemClick.bind(this))\n        },\n\n        /**\n         * Handle radio item click event.\n         * @param {Event} event - Click event.\n         */\n        onItemClick: function (event) {\n            const $item = $(event.currentTarget)\n            const value = $item.find('.radio').val()\n\n            this.setValue(value)\n\n            if (typeof this.options.onChange === 'function') {\n                this.options.onChange(value)\n            }\n        },\n\n        /**\n         * Set the radio value.\n         * @param {string} value - Value to set.\n         */\n        setValue: function (value) {\n            this.options.value = value\n\n            this.$radioList\n                .find('.radio-item')\n                .removeClass('is-checked')\n                .find(`[value=\"${value}\"]`)\n                .parent()\n                .addClass('is-checked')\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Radio = function (options) {\n        return new Radio(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/radio.js?");

/***/ }),

/***/ "./src/js/rangeslider.js":
/*!*******************************!*\
  !*** ./src/js/rangeslider.js ***!
  \*******************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Range Slider\n @author WTERH\n * @author Your Name\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Range Slider constructor.\n     * @param {Object} options - User options.\n     */\n    function RangeSlider(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    RangeSlider.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the range slider container (required).\n            element: null,\n            // Minimum value of the range slider.\n            min: 0,\n            // Maximum value of the range slider.\n            max: 100,\n            // Initial value of the range slider.\n            value: 0,\n            // Callback function when the range slider value changes.\n            onChange: null,\n        },\n\n        /**\n         * Initialize the range slider.\n         */\n        init: function () {\n            this.$input = $('<input type=\"range\">').attr({\n                min: this.options.min,\n                max: this.options.max,\n                value: this.options.value,\n            })\n\n            this.$element.addClass('range-slider').append(this.$input)\n            this.createSliderComponents()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the range slider components.\n         */\n        createSliderComponents: function () {\n            this.$track = $('<div class=\"range-slider__track\"></div>')\n            this.$fill = $('<div class=\"range-slider__fill\"></div>')\n            this.$thumb = $('<div class=\"range-slider__thumb\"></div>')\n\n            this.$element.append(this.$track, this.$fill, this.$thumb)\n            this.updateSlider()\n        },\n\n        /**\n         * Bind events to the range slider.\n         */\n        bindEvents: function () {\n            this.$input.on('input', this.onInputChange.bind(this))\n        },\n\n        /**\n         * Handle range slider input change event.\n         * @param {Event} event - Input change event.\n         */\n        onInputChange: function (event) {\n            this.options.value = event.target.value\n            this.updateSlider()\n\n            if (typeof this.options.onChange === 'function') {\n                this.options.onChange(this.options.value)\n            }\n        },\n\n        /**\n         * Update the range slider components.\n         */\n        updateSlider: function () {\n            const percent = ((this.options.value - this.options.min) / (this.options.max - this.options.min)) * 100\n\n            this.$fill.css('width', `${percent}%`)\n            this.$thumb.css('left', `${percent}%`)\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3RangeSlider = function (options) {\n        return new RangeSlider(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/rangeslider.js?");

/***/ }),

/***/ "./src/js/searchbar.js":
/*!*****************************!*\
  !*** ./src/js/searchbar.js ***!
  \*****************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Searchbar\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Searchbar constructor.\n     * @param {Object} options - User options.\n     */\n    function Searchbar(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Searchbar.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the searchbar container (required).\n            element: null,\n            // Placeholder text for the search input.\n            placeholder: 'Search...',\n            // Callback function when the search input value changes.\n            onSearch: null,\n        },\n\n        /**\n         * Initialize the searchbar.\n         */\n        init: function () {\n            this.$input = $('<input type=\"text\">').attr('placeholder', this.options.placeholder)\n            this.$icon = $('<i class=\"searchbar__icon fa fa-search\"></i>')\n\n            this.$element.addClass('searchbar').append(this.$input, this.$icon)\n            this.bindEvents()\n        },\n\n        /**\n         * Bind events to the searchbar.\n         */\n        bindEvents: function () {\n            this.$input.on('input', this.onInputChange.bind(this))\n        },\n\n        /**\n         * Handle searchbar input change event.\n         * @param {Event} event - Input change event.\n         */\n        onInputChange: function (event) {\n            const value = event.target.value\n\n            if (typeof this.options.onSearch === 'function') {\n                this.options.onSearch(value)\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Searchbar = function (options) {\n        return new Searchbar(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/searchbar.js?");

/***/ }),

/***/ "./src/js/segmentedcontrol.js":
/*!************************************!*\
  !*** ./src/js/segmentedcontrol.js ***!
  \************************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Segmented Control\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * SegmentedControl constructor.\n     * @param {Object} options - User options.\n     */\n    function SegmentedControl(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    SegmentedControl.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the segmented control container (required).\n            element: null,\n            // Items for the segmented control.\n            items: [],\n            // Selected item index.\n            selectedIndex: 0,\n            // Callback function when the selected item changes.\n            onChange: null,\n        },\n\n        /**\n         * Initialize the segmented control.\n         */\n        init: function () {\n            this.$items = $()\n\n            this.render()\n            this.bindEvents()\n        },\n\n        /**\n         * Render the segmented control items.\n         */\n        render: function () {\n            this.$items = this.options.items.map((item, index) => {\n                const $item = $(`<div class=\"segmented-control__item ${index === this.options.selectedIndex ? 'is-selected' : ''}\">${item}</div>`)\n                this.$element.append($item)\n                return $item\n            })\n        },\n\n        /**\n         * Bind events to the segmented control.\n         */\n        bindEvents: function () {\n            this.$items.on('click', this.onItemClick.bind(this))\n        },\n\n        /**\n         * Handle segmented control item click event.\n         * @param {Event} event - Click event.\n         */\n        onItemClick: function (event) {\n            const $item = $(event.currentTarget)\n            const index = this.$items.index($item)\n\n            this.setSelectedIndex(index)\n\n            if (typeof this.options.onChange === 'function') {\n                this.options.onChange(index)\n            }\n        },\n\n        /**\n         * Set the selected item index.\n         * @param {number} index - Index of the item to select.\n         */\n        setSelectedIndex: function (index) {\n            this.options.selectedIndex = index\n\n            this.$items.removeClass('is-selected').eq(index).addClass('is-selected')\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3SegmentedControl = function (options) {\n        return new SegmentedControl(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/segmentedcontrol.js?");

/***/ }),

/***/ "./src/js/sheetmodal.js":
/*!******************************!*\
  !*** ./src/js/sheetmodal.js ***!
  \******************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Sheet Modal\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * SheetModal constructor.\n     * @param {Object} options - User options.\n     */\n    function SheetModal(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$body = $('body')\n        this.init()\n    }\n\n    SheetModal.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Content HTML (required).\n            content: null,\n            // Callback function when the sheet modal is closed.\n            onClose: null,\n        },\n\n        /**\n         * Initialize the sheet modal.\n         */\n        init: function () {\n            this.createSheetModal()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the sheet modal DOM elements.\n         */\n        createSheetModal: function () {\n            this.$sheetModal = $(`\n        <div class=\"sheet-modal\">\n          <div class=\"sheet-modal__content\">\n            ${this.options.content}\n            <div class=\"sheet-modal__close\">&times;</div>\n          </div>\n        </div>\n      `)\n\n            this.$body.append(this.$sheetModal)\n        },\n\n        /**\n         * Bind events to the sheet modal.\n         */\n        bindEvents: function () {\n            this.$sheetModal.on('click', '.sheet-modal__close', this.close.bind(this))\n        },\n\n        /**\n         * Open the sheet modal.\n         */\n        open: function () {\n            this.$sheetModal.addClass('is-visible')\n        },\n\n        /**\n         * Close the sheet modal.\n         */\n        close: function () {\n            this.$sheetModal.removeClass('is-visible')\n\n            if (typeof this.options.onClose === 'function') {\n                this.options.onClose()\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3SheetModal = function (options) {\n        return new SheetModal(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/sheetmodal.js?");

/***/ }),

/***/ "./src/js/sidepanel.js":
/*!*****************************!*\
  !*** ./src/js/sidepanel.js ***!
  \*****************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Side Panel\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * SidePanel constructor.\n     * @param {Object} options - User options.\n     */\n    function SidePanel(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    SidePanel.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the side panel container (required).\n            element: null,\n            // Side panel alignment: 'left' or 'right'.\n            alignment: 'left',\n            // Callback function when the side panel is closed.\n            onClose: null,\n        },\n\n        /**\n         * Initialize the side panel.\n         */\n        init: function () {\n            this.createOverlay()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the side panel overlay.\n         */\n        createOverlay: function () {\n            this.$overlay = $('<div class=\"side-panel__overlay\"></div>')\n            $('body').append(this.$overlay)\n        },\n\n        /**\n         * Bind events to the side panel.\n         */\n        bindEvents: function () {\n            this.$overlay.on('click', this.close.bind(this))\n        },\n\n        /**\n         * Open the side panel.\n         */\n        open: function () {\n            this.$element.addClass('is-visible')\n        },\n\n        /**\n         * Close the side panel.\n         */\n        close: function () {\n            this.$element.removeClass('is-visible')\n\n            if (typeof this.options.onClose === 'function') {\n                this.options.onClose()\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3SidePanel = function (options) {\n        return new SidePanel(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/sidepanel.js?");

/***/ }),

/***/ "./src/js/stepper.js":
/*!***************************!*\
  !*** ./src/js/stepper.js ***!
  \***************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Stepper\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Stepper constructor.\n     * @param {Object} options - User options.\n     */\n    function Stepper(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Stepper.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the stepper container (required).\n            element: null,\n            // Minimum value of the stepper.\n            min: 0,\n            // Maximum value of the stepper.\n            max: 10,\n            // Initial value of the stepper.\n            value: 0,\n            // Step value for incrementing and decrementing.\n            step: 1,\n            // Callback function when the stepper value changes.\n            onChange: null,\n        },\n\n        /**\n         * Initialize the stepper.\n         */\n        init: function () {\n            this.$input = $('<input type=\"text\" class=\"stepper__input\">').val(this.options.value)\n            this.$decrementButton = $(`<button type=\"button\" class=\"stepper__button\" disabled>&minus;</button>`)\n            this.$incrementButton = $(`<button type=\"button\" class=\"stepper__button\">&plus;</button>`)\n\n            this.$element.addClass('stepper').append(this.$decrementButton, this.$input, this.$incrementButton)\n            this.bindEvents()\n        },\n\n        /**\n         * Bind events to the stepper.\n         */\n        bindEvents: function () {\n            this.$decrementButton.on('click', this.decrement.bind(this))\n            this.$incrementButton.on('click', this.increment.bind(this))\n        },\n\n        /**\n         * Decrement the stepper value.\n         */\n        decrement: function () {\n            const newValue = this.options.value - this.options.step\n\n            if (newValue >= this.options.min) {\n                this.setValue(newValue)\n            }\n        },\n\n        /**\n         * Increment the stepper value.\n         */\n        increment: function () {\n            const newValue = this.options.value + this.options.step\n\n            if (newValue <= this.options.max) {\n                this.setValue(newValue)\n            }\n        },\n\n        /**\n         * Set the stepper value.\n         * @param {number} value - Value to set.\n         */\n        setValue: function (value) {\n            this.options.value = value\n            this.$input.val(this.options.value)\n\n            this.$decrementButton.prop('disabled', this.options.value <= this.options.min)\n            this.$incrementButton.prop('disabled', this.options.value >= this.options.max)\n\n            if (typeof this.options.onChange === 'function') {\n                this.options.onChange(this.options.value)\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Stepper = function (options) {\n        return new Stepper(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/stepper.js?");

/***/ }),

/***/ "./src/js/subnavbar.js":
/*!*****************************!*\
  !*** ./src/js/subnavbar.js ***!
  \*****************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Subnavbar\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Subnavbar constructor.\n     * @param {Object} options - User options.\n     */\n    function Subnavbar(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Subnavbar.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the subnavbar container (required).\n            element: null,\n            // Items for the subnavbar.\n            items: [],\n            // Selected item index.\n            selectedIndex: 0,\n            // Callback function when the selected item changes.\n            onChange: null,\n        },\n\n        /**\n         * Initialize the subnavbar.\n         */\n        init: function () {\n            this.$items = $()\n\n            this.render()\n            this.bindEvents()\n        },\n\n        /**\n         * Render the subnavbar items.\n         */\n        render: function () {\n            this.$items = this.options.items.map((item, index) => {\n                const $item = $(`<div class=\"subnavbar__item ${index === this.options.selectedIndex ? 'is-selected' : ''}\">${item}</div>`)\n                this.$element.append($item)\n                return $item\n            })\n        },\n\n        /**\n         * Bind events to the subnavbar.\n         */\n        bindEvents: function () {\n            this.$items.on('click', this.onItemClick.bind(this))\n        },\n\n        /**\n         * Handle subnavbar item click event.\n         * @param {Event} event - Click event.\n         */\n        onItemClick: function (event) {\n            const $item = $(event.currentTarget)\n            const index = this.$items.index($item)\n\n            this.setSelectedIndex(index)\n\n            if (typeof this.options.onChange === 'function') {\n                this.options.onChange(index)\n            }\n        },\n\n        /**\n         * Set the selected item index.\n         * @param {number} index - Index of the item to select.\n         */\n        setSelectedIndex: function (index) {\n            this.options.selectedIndex = index\n\n            this.$items.removeClass('is-selected').eq(index).addClass('is-selected')\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Subnavbar = function (options) {\n        return new Subnavbar(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/subnavbar.js?");

/***/ }),

/***/ "./src/js/tabber.js":
/*!**************************!*\
  !*** ./src/js/tabber.js ***!
  \**************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Tabber\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Tabber constructor.\n     * @param {Object} options - User options.\n     */\n    function Tabber(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Tabber.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the tabber container (required).\n            element: null,\n            // Items for the tabber.\n            items: [],\n            // Selected item index.\n            selectedIndex: 0,\n            // Flag to show or hide tab text.\n            showText: true,\n            // Flag to show or hide tab icons.\n            showIcons: true,\n            // Callback function when the selected item changes.\n            onChange: null,\n        },\n\n        /**\n         * Initialize the tabber.\n         */\n        init: function () {\n            this.$tabs = $()\n            this.$contents = $()\n\n            this.render()\n            this.bindEvents()\n        },\n\n        /**\n         * Render the tabber items and contents.\n         */\n        render: function () {\n            const $tabs = $(`<div class=\"tabber__tabs\"></div>`)\n            const $contents = $(`<div></div>`)\n\n            this.options.items.forEach((item, index) => {\n                const $tab = $(`<div class=\"tabber__tab ${index === this.options.selectedIndex ? 'is-selected' : ''}\"></div>`)\n\n                if (this.options.showIcons && item.icon) {\n                    $tab.append(`<i class=\"tabber__icon ${item.icon}\"></i>`)\n                }\n\n                if (this.options.showText && item.text) {\n                    $tab.append(`<span>${item.text}</span>`)\n                }\n\n                $tabs.append($tab)\n                this.$tabs = this.$tabs.add($tab)\n\n                const $content = $(`<div class=\"tabber__content\" ${index === this.options.selectedIndex ? '' : 'style=\"display: none;\"'}>${item.content}</div>`)\n                $contents.append($content)\n                this.$contents = this.$contents.add($content)\n            })\n\n            this.$element.addClass('tabber').append($tabs, $contents)\n        },\n\n        /**\n         * Bind events to the tabber.\n         */\n        bindEvents: function () {\n            this.$tabs.on('click', this.onTabClick.bind(this))\n        },\n\n        /**\n         * Handle tabber tab click event.\n         * @param {Event} event - Click event.\n         */\n        onTabClick: function (event) {\n            const $tab = $(event.currentTarget)\n            const index = this.$tabs.index($tab)\n\n            this.setSelectedIndex(index)\n\n            if (typeof this.options.onChange === 'function') {\n                this.options.onChange(index)\n            }\n        },\n\n        /**\n         * Set the selected item index.\n         * @param {number} index - Index of the item to select.\n         */\n        setSelectedIndex: function (index) {\n            this.options.selectedIndex = index\n\n            this.$tabs.removeClass('is-selected').eq(index).addClass('is-selected')\n            this.$contents.hide().eq(index).show()\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Tabber = function (options) {\n        return new Tabber(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/tabber.js?");

/***/ }),

/***/ "./src/js/toast.js":
/*!*************************!*\
  !*** ./src/js/toast.js ***!
  \*************************/
/***/ (() => {

eval("/**\n * jQuery i3-UI Toast\n * @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Toast constructor.\n     * @param {Object} options - User options.\n     */\n    function Toast(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Toast.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the toast container (required).\n            element: null,\n            // Toast message.\n            message: '',\n            // Toast type: 'success', 'info', 'warning', or 'danger'.\n            type: 'info',\n            // Toast alignment: 'left', 'center', or 'right'.\n            alignment: 'center',\n            // Timeout before hiding the toast (in milliseconds).\n            timeout: 3000,\n            // Callback function when the toast is hidden.\n            onHide: null,\n        },\n\n        /**\n         * Initialize the toast.\n         */\n        init: function () {\n            this.createToast()\n            this.show()\n        },\n\n        /**\n         * Create the toast DOM elements.\n         */\n        createToast: function () {\n            const toastClass = `toast toast--${this.options.alignment} toast--${this.options.type}`\n            this.$toast = $(`<div class=\"${toastClass} is-hidden\">${this.options.message}</div>`)\n\n            this.$element.append(this.$toast)\n        },\n\n        /**\n         * Show the toast.\n         */\n        show: function () {\n            this.$toast.removeClass('is-hidden')\n\n            const self = this\n\n            setTimeout(function () {\n                self.hide()\n            }, this.options.timeout)\n        },\n\n        /**\n         * Hide the toast.\n         */\n        hide: function () {\n            this.$toast.addClass('is-hidden')\n\n            if (typeof this.options.onHide === 'function') {\n                this.options.onHide()\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Toast = function (options) {\n        return new Toast(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/toast.js?");

/***/ }),

/***/ "./src/js/toggle.js":
/*!**************************!*\
  !*** ./src/js/toggle.js ***!
  \**************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Toggle\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Toggle constructor.\n     * @param {Object} options - User options.\n     */\n    function Toggle(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Toggle.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the toggle container (required).\n            element: null,\n            // Initial state of the toggle: true for checked, false for unchecked.\n            state: false,\n            // Callback function when the toggle state changes.\n            onChange: null,\n        },\n\n        /**\n         * Initialize the toggle.\n         */\n        init: function () {\n            this.createToggle()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the toggle DOM elements.\n         */\n        createToggle: function () {\n            this.$input = $('<input type=\"checkbox\" class=\"toggle__input\">').attr('checked', this.options.state)\n            this.$slider = $('<label class=\"toggle__slider\"></label>')\n\n            this.$element.addClass('toggle').append(this.$input, this.$slider)\n        },\n\n        /**\n         * Bind events to the toggle.\n         */\n        bindEvents: function () {\n            this.$input.on('change', this.onInputChange.bind(this))\n        },\n\n        /**\n         * Handle toggle input change event.\n         * @param {Event} event - Change event.\n         */\n        onInputChange: function (event) {\n            this.options.state = event.target.checked\n\n            if (typeof this.options.onChange === 'function') {\n                this.options.onChange(this.options.state)\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Toggle = function (options) {\n        return new Toggle(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/toggle.js?");

/***/ }),

/***/ "./src/js/toolbar.js":
/*!***************************!*\
  !*** ./src/js/toolbar.js ***!
  \***************************/
/***/ (() => {

eval("/**\n jQuery i3-UI Toolbar\n @author WTERH\n * @version 1.0.0\n */\n\n;(function ($) {\n    'use strict'\n\n    /**\n     * Toolbar constructor.\n     * @param {Object} options - User options.\n     */\n    function Toolbar(options) {\n        this.options = $.extend({}, this.defaults, options)\n        this.$element = $(this.options.element)\n        this.init()\n    }\n\n    Toolbar.prototype = {\n        /**\n         * Default options.\n         * @type {Object}\n         */\n        defaults: {\n            // Selector or DOM element of the toolbar container (required).\n            element: null,\n            // Toolbar alignment: 'top' or 'bottom'.\n            alignment: 'top',\n            // Buttons for the toolbar.\n            buttons: [],\n            // Callback function when a button is clicked.\n            onClick: null,\n        },\n\n        /**\n         * Initialize the toolbar.\n         */\n        init: function () {\n            this.createToolbar()\n            this.bindEvents()\n        },\n\n        /**\n         * Create the toolbar DOM elements.\n         */\n        createToolbar: function () {\n            this.$toolbar = $(`<div class=\"toolbar toolbar--${this.options.alignment}\"></div>`)\n\n            this.options.buttons.forEach((button) => {\n                const $button = $(`<button class=\"toolbar__button\">${button.text}</button>`)\n\n                if (button.icon) {\n                    $button.prepend(`<i class=\"${button.icon}\"></i>`)\n                }\n\n                this.$toolbar.append($button)\n            })\n\n            this.$element.append(this.$toolbar)\n        },\n\n        /**\n         * Bind events to the toolbar.\n         */\n        bindEvents: function () {\n            this.$toolbar.on('click', '.toolbar__button', this.onButtonClick.bind(this))\n        },\n\n        /**\n         * Handle toolbar button click event.\n         * @param {Event} event - Click event.\n         */\n        onButtonClick: function (event) {\n            const $button = $(event.currentTarget)\n            const index = this.$toolbar.find('.toolbar__button').index($button)\n\n            if (typeof this.options.onClick === 'function') {\n                this.options.onClick(index)\n            }\n        },\n    }\n\n    /**\n     * jQuery plugin definition.\n     * @param {Object} options - User options.\n     */\n    $.fn.i3Toolbar = function (options) {\n        return new Toolbar(options)\n    }\n})(jQuery)\n\n\n//# sourceURL=webpack:///./src/js/toolbar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./src/js/toolbar.js"]();
/******/ 	__webpack_modules__["./src/js/toggle.js"]();
/******/ 	__webpack_modules__["./src/js/toast.js"]();
/******/ 	__webpack_modules__["./src/js/tabber.js"]();
/******/ 	__webpack_modules__["./src/js/subnavbar.js"]();
/******/ 	__webpack_modules__["./src/js/stepper.js"]();
/******/ 	__webpack_modules__["./src/js/sidepanel.js"]();
/******/ 	__webpack_modules__["./src/js/sheetmodal.js"]();
/******/ 	__webpack_modules__["./src/js/segmentedcontrol.js"]();
/******/ 	__webpack_modules__["./src/js/searchbar.js"]();
/******/ 	__webpack_modules__["./src/js/rangeslider.js"]();
/******/ 	__webpack_modules__["./src/js/radio.js"]();
/******/ 	__webpack_modules__["./src/js/progressbar.js"]();
/******/ 	__webpack_modules__["./src/js/preloader.js"]();
/******/ 	__webpack_modules__["./src/js/popup.js"]();
/******/ 	__webpack_modules__["./src/js/popover.js"]();
/******/ 	__webpack_modules__["./src/js/notification.js"]();
/******/ 	__webpack_modules__["./src/js/navbar.js"]();
/******/ 	__webpack_modules__["./src/js/messages.js"]();
/******/ 	__webpack_modules__["./src/js/menulist.js"]();
/******/ 	__webpack_modules__["./src/js/listbutton.js"]();
/******/ 	__webpack_modules__["./src/js/list.js"]();
/******/ 	__webpack_modules__["./src/js/forminputs.js"]();
/******/ 	__webpack_modules__["./src/js/fab.js"]();
/******/ 	__webpack_modules__["./src/js/dialog.js"]();
/******/ 	__webpack_modules__["./src/js/datatables.js"]();
/******/ 	__webpack_modules__["./src/js/contentblock.js"]();
/******/ 	__webpack_modules__["./src/js/contactlist.js"]();
/******/ 	__webpack_modules__["./src/js/chips.js"]();
/******/ 	__webpack_modules__["./src/js/breadrcrumbs.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/badge.js"]();
/******/ 	
/******/ })()
;